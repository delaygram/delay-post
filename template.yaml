AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: delay-post

Globals:
  Function:
    Timeout: 5
    Runtime: python3.9
    Architectures: [ x86_64 ]
    Handler: app.lambda_handler
    Layers: [ !Ref DependenciesLayer ]
    Environment:
      Variables:
        StageName: !Ref StageName
        EVENT_BUS: !Ref EventBus
        POSTS_TABLE: !Ref PostsTable

Parameters:
  StageName:
    Type: String
    Default: default
  EventBus:
    Type: String
    Default: default
  AuthArn:
    Type: String
    Default: default

Resources:

  # Post API

  PostApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: "INFO"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml
      BinaryMediaTypes:
        - '*/*'
      Auth:
        DefaultAuthorizer: DelaygramAuthorizer
        Authorizers:
          DelaygramAuthorizer:
            UserPoolArn:
              Fn::Sub: arn:aws:cognito-idp:eu-west-3:088217417350:userpool/eu-west-3_${AuthArn}
            Identity:
              Header: token

  # Staging VhJGi8jOl
  # Production kak2I0gck

  # Post API Permissions

  AllowPostApiToInvokeCreateLambda:
    Type: AWS::Lambda::Permission
    DependsOn: CreateFunction
    Properties:
      FunctionName: !GetAtt CreateFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PostApi}/${StageName}/POST/post/posts

  AllowPostApiToInvokeDeleteLambda:
    Type: AWS::Lambda::Permission
    DependsOn: DeleteFunction
    Properties:
      FunctionName: !GetAtt DeleteFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PostApi}/${StageName}/DELETE/post/posts/{id}

  AllowPostApiToInvokeCurrentUserPostLambda:
    Type: AWS::Lambda::Permission
    DependsOn: CurrentUserPostFunction
    Properties:
      FunctionName: !GetAtt CurrentUserPostFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PostApi}/${StageName}/GET/post/posts/me

  AllowPostApiToInvokeGivenUserPostLambda:
    Type: AWS::Lambda::Permission
    DependsOn: GivenUserPostFunction
    Properties:
      FunctionName: !GetAtt GivenUserPostFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PostApi}/${StageName}/GET/post/posts/{username}

  AllowPostApiToInvokeSpecificPostLambda:
    Type: AWS::Lambda::Permission
    DependsOn: SpecificPostFunction
    Properties:
      FunctionName: !GetAtt SpecificPostFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PostApi}/${StageName}/POST/post/posts/in

  # Functions

  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Tracing: Active

  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Tracing: Active

  CurrentUserPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_current_user_post
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Tracing: Active

  GivenUserPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_given_user_post
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Tracing: Active

  SpecificPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_specific_post
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Tracing: Active

  # Dependencies

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: delaygram-dependencies-${StageName}
      ContentUri: dependencies
    Metadata:
      BuildMethod: python3.9

  # DynamoDB

  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TableName:
        Fn::Sub: PostsTable-${StageName}
      BillingMode: PAY_PER_REQUEST

  # Event Bus Permissions

#  PermissionForCreateEventToInvokeCreateLambda:
#    Type: AWS::Lambda::Permission
#    Properties:
#      FunctionName: !Ref CreateFunction
#      Action: lambda:InvokeFunction
#      Principal: events.amazonaws.com
#      SourceArn: !GetAtt CheckDeckPlayabilitySubscription.Arn

Outputs:
  PostApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${PostApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/post"
