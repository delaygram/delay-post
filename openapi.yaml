openapi: 3.0.3
info:
  title: Delaygram Post API
  version: 1.0.0

servers:
  - url: https://delaygram.nl/

tags:
  - name: Post
    description: Post related endpoints

paths:
  /post/posts:
    post:
      summary: Create a new post
      tags:
        - Post
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: User token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        200:
          $ref: '#/components/responses/PostSuccess'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateFunction.Arn}/invocations

  /post/posts/validate:
    put:
      summary: Validate a post
      tags:
        - Post
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: User token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ValidateRequest'
      responses:
        200:
          $ref: '#/components/responses/PostSuccess'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ValidateFunction.Arn}/invocations


  /post/posts/{id}:
    get:
      summary: Get a post of a specified user
      tags:
        - Post
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: User token
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of a user
          example: john98
      responses:
        200:
          $ref: '#/components/responses/GetSuccess'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GivenUserPostFunction.Arn}/invocations
    delete:
      summary: Delete a post
      tags:
        - Post
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: User token
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Post ID
          example: dc65e367-a473-473f-9bc9-a8d64dcf7fe4
      responses:
        200:
          $ref: '#/components/responses/DeleteSuccess'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFunction.Arn}/invocations

  /post/posts/me:
    get:
      summary: Get all posts of yourself
      tags:
        - Post
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: User token
      responses:
        200:
          $ref: '#/components/responses/GetSuccess'
        204:
          $ref: '#/components/responses/NoContentResponse'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CurrentUserPostFunction.Arn}/invocations

  /post/posts/in:
    post:
      summary: Get all posts you specified
      tags:
        - Post
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: User token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/IdsRequest'
      responses:
        200:
          $ref: '#/components/responses/GetSuccess'
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SpecificPostFunction.Arn}/invocations

components:
  responses:
    PostSuccess:
      description: Successful Post response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'

    DeleteSuccess:
      description: Successful Delete response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'

    GetSuccess:
      description: Successful Get response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Post'

    NoContentResponse:
      description: No content response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'

    NotFoundResponse:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    PostRequest:
      type: object
      properties:
        file:
          type: string
          description: The name of the file to be uploaded
          example: 'pannekoek.png'
        caption:
          type: string
          description: The caption of the post
          example: 'This is a pannekoek'
    ValidateRequest:
      type: object
      properties:
        generated_filename:
          type: string
          example: '3d11e062-8a9f-4eeb-93ea-5757f845f537-1651912563.8017569.png'
        uploaded:
          type: boolean
          example: true
    IdsRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    Post:
      type: object
      properties:
        user_id:
          type: string
          description: The id of the user
          example: '3d11e062-8a9f-4eeb-93ea-5757f845f537'
        upload_url:
          type: string
          description: The url to upload the file to
          example: 'https://example.com/upload/filename.png'
        generated_filename:
          type: string
          description: The generated filename of the file
          example: '3d11e062-8a9f-4eeb-93ea-5757f845f537-1651912563.8017569.png'
        caption:
          type: string
          description: The caption of the post
          example: 'This is a pannekoek'
    Error:
      type: object
      properties:
        message:
          type: string
    Success:
      type: object
      properties:
        message:
          type: string